/**
 * 
 */
package miniRSAChat;

/**
 * @author Jie Qi
 * @version April 20, 2012
 * This class provides RSA algorithm implementation and encrypt/decrypt on it. 
 */
public class RSA {
	// Public key contains N and e
	public static class PublicKey {
		public final long N;
		public final long e;
		// Constructs a PublicKey
		PublicKey(long N, long e) {
			this.N = N;
			this.e = e;
		}
	}
	
	// Private key contains N and d
	public static class PrivateKey {
		public final long N;
		public final long d;
		// Constructs a PrivateKey
		PrivateKey(long N, long d) {
			this.N = N;
			this.d = d;
		}
	}

	// Key pair of public and private key
	public static class RSAKeyPair {
		public final PublicKey public_key;
		public final PrivateKey private_key;
		RSAKeyPair(PublicKey public_key, PrivateKey private_key) {
			this.public_key = public_key;
			this.private_key = private_key;
		}
	}
	
	// Encrpyt char to ciphertext with public key e in RSA algorithm
	static public long encryptChar(PublicKey public_key, char ch) {
		long chValue = (long)ch;
		long resultValue = 1;
		// encryption in mode N
		for (int i = 0; i < public_key.e; i++) {
			resultValue *= chValue;
			resultValue = resultValue % public_key.N;
		}
		return resultValue;
	}
	
	// Encrypt plaintext string to ciphertext in char unit with public key e in RSA
	static public long[] encrpyt(PublicKey public_key, String plain_text) {
		long[] cipher_text = new long[plain_text.length()];
		char[] plain_chars = plain_text.toCharArray();
		// encryption char by char
		for (int i = 0; i < plain_chars.length; i++) {
			cipher_text[i] = encryptChar(public_key, plain_chars[i]);
		}
		return cipher_text;
	}
	
	
	
}
